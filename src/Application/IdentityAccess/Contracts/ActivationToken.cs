using System;

namespace Application.IdentityAccess.Contracts
{
    /// <summary>
    /// Represents an activation token issued by the external identity provider.
    /// This token is typically a Base64Url string generated by ASP.NET Identity
    /// and is valid only for a limited duration.
    /// </summary>
    public sealed record ActivationToken
    {
        /// <summary>
        /// Canonical textual representation of the activation token.
        /// Always Base64Url-encoded when transmitted via links.
        /// </summary>
        public string Value { get; }

        /// <summary>
        /// Optional expiration date/time (UTC).
        /// Null means the token has no explicit expiry from the provider.
        /// </summary>
        public DateTimeOffset? ExpiresAt { get; }

        public ActivationToken(string value, DateTimeOffset? expiresAt)
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Token value must be provided.", nameof(value));

            Value = value;
            ExpiresAt = expiresAt;
        }

        /// <summary>
        /// Indicates whether the token is expired as of now (UTC).
        /// Returns false if <see cref="ExpiresAt"/> is null.
        /// </summary>
        public bool IsExpired => ExpiresAt.HasValue && ExpiresAt.Value <= DateTimeOffset.UtcNow;

        /// <summary>
        /// Factory method for creating a token without explicit expiration.
        /// </summary>
        public static ActivationToken WithoutExpiry(string value) => new(value, null);

        /// <inheritdoc />
        public override string ToString() => Value;
    }
}
